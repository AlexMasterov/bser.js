'use strict';

const { byte, byteStrN, strN, byteN, arrN, objN } = require('./data');

const MIN_SAFE_INT = Number.MIN_SAFE_INTEGER;
const MAX_SAFE_INT = Number.MAX_SAFE_INTEGER;
const MIN_SAFE_INT_OVERFLOW = MIN_SAFE_INT - 1;
const MAX_SAFE_INT_OVERFLOW = MAX_SAFE_INT + 1;

const toBuf = bin => Buffer.from([0x00, 0x01, ...bin]);
const type = (name, value, { BE, LE }) => ({ name, value, BE, LE });

const types = {
  'null': [
    type('null', null, {
      BE: byte(0x03, 0x01, 0x0a),
      LE: byte(0x03, 0x01, 0x0a),
    }),
  ],

  'boolean': [
    type('true', true, {
      BE: byte(0x03, 0x01, 0x08),
      LE: byte(0x03, 0x01, 0x08),
    }),
    type('false', false, {
      BE: byte(0x03, 0x01, 0x09),
      LE: byte(0x03, 0x01, 0x09),
    }),
  ],

  'int8_t': [
    type('min (-127)', -127, {
      BE: byte(0x03, 0x02, 0x03, 0x81),
      LE: byte(0x03, 0x02, 0x03, 0x81),
    }),
    type('max (127)', 127, {
      BE: byte(0x03, 0x02, 0x03, 0x7f),
      LE: byte(0x03, 0x02, 0x03, 0x7f),
    }),
  ],
  'int16_t': [
    type('min neg (-128)', -128, {
      BE: byte(0x03, 0x03, 0x04, 0xff, 0x80),
      LE: byte(0x03, 0x03, 0x04, 0x80, 0xff),
    }),
    type('max neg (-32767)', -32767, {
      BE: byte(0x03, 0x03, 0x04, 0x80, 0x01),
      LE: byte(0x03, 0x03, 0x04, 0x01, 0x80),
    }),
    type('min pos (128)', 128, {
      BE: byte(0x03, 0x03, 0x04, 0x00, 0x80),
      LE: byte(0x03, 0x03, 0x04, 0x80, 0x00),
    }),
    type('max pos (32767)', 32767, {
      BE: byte(0x03, 0x03, 0x04, 0x7f, 0xff),
      LE: byte(0x03, 0x03, 0x04, 0xff, 0x7f),
    }),
  ],
  'int32_t': [
    type('min neg (-32768)', -32768, {
      BE: byte(0x03, 0x05, 0x05, 0xff, 0xff, 0x80, 0x00),
      LE: byte(0x03, 0x05, 0x05, 0x00, 0x80, 0xff, 0xff),
    }),
    type('min neg (-2147483647)', -2147483647, {
      BE: byte(0x03, 0x05, 0x05, 0x80, 0x00, 0x00, 0x01),
      LE: byte(0x03, 0x05, 0x05, 0x01, 0x00, 0x00, 0x80),
    }),
    type('min pos (32768)', 32768, {
      BE: byte(0x03, 0x05, 0x05, 0x00, 0x00, 0x80, 0x00),
      LE: byte(0x03, 0x05, 0x05, 0x00, 0x80, 0x00, 0x00),
    }),
    type('max pos (2147483647)', 2147483647, {
      BE: byte(0x03, 0x05, 0x05, 0x7f, 0xff, 0xff, 0xff),
      LE: byte(0x03, 0x05, 0x05, 0xff, 0xff, 0xff, 0x7f),
    }),
  ],
  'int64': [
    type('min (-9007199254740991)', MIN_SAFE_INT, {
      BE: byte(0x03, 0x09, 0x06, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01),
      LE: byte(0x03, 0x09, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff),
    }),
    type('max (9007199254740991)', MAX_SAFE_INT, {
      BE: byte(0x03, 0x09, 0x06, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff),
      LE: byte(0x03, 0x09, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00),
    }),
    type('overflow (-9007199254740992)', MIN_SAFE_INT_OVERFLOW, {
      BE: byte(0x03, 0x09, 0x06, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
      LE: byte(0x03, 0x09, 0x06, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    }),
    type('overflow (9007199254740992)', MAX_SAFE_INT_OVERFLOW, {
      BE: byte(0x03, 0x09, 0x06, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
      LE: byte(0x03, 0x09, 0x06, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    }),
  ],

  'real': [
    type('-Infinity', -Infinity, {
      BE: byte(0x03, 0x09, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
      LE: byte(0x03, 0x09, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff),
    }),
    type('Infinity', Infinity, {
      BE: byte(0x03, 0x09, 0x07, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
      LE: byte(0x03, 0x09, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f),
    }),
    type('NaN', NaN, {
      BE: byte(0x03, 0x09, 0x07, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
      LE: byte(0x03, 0x09, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f),
    }),
  ],

  'str8_t': [
    type('min (0)', '', {
      BE: byte(0x03, 0x03, 0x02, 0x03, 0x00),
      LE: byte(0x03, 0x03, 0x02, 0x03, 0x00),
    }),
    type('opt (10)', strN('a', 10), {
      BE: byte(0x03, 0x0d, 0x02, 0x03, 0x0a, ...byteN(0x61, 10)),
      LE: byte(0x03, 0x0d, 0x02, 0x03, 0x0a, ...byteN(0x61, 10)),
    }),
    type('max (127)', strN('a', 127), {
      BE: byte(0x04, 0x00, 0x82, 0x02, 0x03, 0x07f, ...byteN(0x61, 127)),
      LE: byte(0x04, 0x82, 0x00, 0x02, 0x03, 0x07f, ...byteN(0x61, 127)),
    }),
  ],
  'str16_t': [
    type('min (128)', strN('a', 128), {
      BE: byte(0x04, 0x00, 0x84, 0x02, 0x04, 0x00, 0x80, ...byteN(0x61, 128)),
      LE: byte(0x04, 0x84, 0x00, 0x02, 0x04, 0x80, 0x00, ...byteN(0x61, 128)),
    }),
    type('max (32767)', strN('a', 32767), {
      BE: byte(0x05, 0x00, 0x00, 0x80, 0x03, 0x02, 0x04, 0x07f, 0xff, ...byteN(0x61, 32767)),
      LE: byte(0x05, 0x03, 0x80, 0x00, 0x00, 0x02, 0x04, 0xff, 0x07f, ...byteN(0x61, 32767)),
    }),
  ],
  'str32_t': [
    type('min (32767)', strN('a', 32767), {
      BE: byte(0x05, 0x00, 0x00, 0x80, 0x03, 0x02, 0x04, 0x7f, 0xff, ...byteN(0x61, 32767)),
      LE: byte(0x05, 0x03, 0x80, 0x00, 0x00, 0x02, 0x04, 0xff, 0x7f, ...byteN(0x61, 32767)),
    }),
  ],

  'utf8': [
    type('1 byte (u0000)', '\u0000', {
      BE: byte(0x03, 0x04, 0x02, 0x03, 0x01, 0x00),
      LE: byte(0x03, 0x04, 0x02, 0x03, 0x01, 0x00),
    }),
    type('1 byte (u007f)', '\u007f', {
      BE: byte(0x03, 0x04, 0x02, 0x03, 0x01, 0x7f),
      LE: byte(0x03, 0x04, 0x02, 0x03, 0x01, 0x7f),
    }),
    type('2 byte (u0080)', '\u0080', {
      BE: byte(0x03, 0x05, 0x02, 0x03, 0x02, 0xc2, 0x80),
      LE: byte(0x03, 0x05, 0x02, 0x03, 0x02, 0xc2, 0x80),
    }),
    type('2 byte (u07ff)', '\u07ff', {
      BE: byte(0x03, 0x05, 0x02, 0x03, 0x02, 0xdf, 0xbf),
      LE: byte(0x03, 0x05, 0x02, 0x03, 0x02, 0xdf, 0xbf),
    }),
    type('3 byte (u0800)', '\u0800', {
      BE: byte(0x03, 0x06, 0x02, 0x03, 0x03, 0xe0, 0xa0, 0x80),
      LE: byte(0x03, 0x06, 0x02, 0x03, 0x03, 0xe0, 0xa0, 0x80),
    }),
    type('3 byte (uffff)', '\uffff', {
      BE: byte(0x03, 0x06, 0x02, 0x03, 0x03, 0xef, 0xbf, 0xbf),
      LE: byte(0x03, 0x06, 0x02, 0x03, 0x03, 0xef, 0xbf, 0xbf),
    }),
    type('4 byte (u10000)', '\u10000', {
      BE: byte(0x03, 0x07, 0x02, 0x03, 0x04, 0xe1, 0x80, 0x80, 0x30),
      LE: byte(0x03, 0x07, 0x02, 0x03, 0x04, 0xe1, 0x80, 0x80, 0x30),
    }),
    type('5 byte (u10ffff)', '\u10ffff', {
      BE: byte(0x03, 0x08, 0x02, 0x03, 0x05, 0xe1, 0x83,0xbf, 0x66, 0x66),
      LE: byte(0x03, 0x08, 0x02, 0x03, 0x05, 0xe1, 0x83,0xbf, 0x66, 0x66),
    }),
  ],

  'arr8_t': [
    type('min (0)', [], {
      BE: byte(0x03, 0x03, 0x00, 0x03, 0x00),
      LE: byte(0x03, 0x03, 0x00, 0x03, 0x00),
    }),
    type('min (127)', arrN(null, 127), {
      BE: byte(0x04, 0x00, 0x82, 0x00, 0x03, 0x7f, ...byteN(0x0a, 127)),
      LE: byte(0x04, 0x82, 0x00, 0x00, 0x03, 0x7f, ...byteN(0x0a, 127)),
    }),
  ],
  'arr16_t': [
    type('min (128)', arrN(null, 128), {
      BE: byte(0x04, 0x00, 0x84, 0x00, 0x04, 0x00, 0x80, ...byteN(0x0a, 128)),
      LE: byte(0x04, 0x84, 0x00, 0x00, 0x04, 0x80, 0x00, ...byteN(0x0a, 128)),
    }),
    type('max (32767)', arrN(null, 32767), {
      BE: byte(0x05, 0x00, 0x00, 0x80, 0x03, 0x00, 0x04, 0x7f, 0xff, ...byteN(0x0a, 32767)),
      LE: byte(0x05, 0x03, 0x80, 0x00, 0x00, 0x00, 0x04, 0xff, 0x7f, ...byteN(0x0a, 32767)),
    }),
  ],
  'arr32_t': [
    type('min (32768)', arrN(null, 32768), {
      BE: byte(0x05, 0x00, 0x00, 0x80, 0x06, 0x00, 0x05, 0x00, 0x00, 0x80, 0x00, ...byteN(0x0a, 32768)),
      LE: byte(0x05, 0x06, 0x80, 0x00, 0x00, 0x00, 0x05, 0x00, 0x80, 0x00, 0x00, ...byteN(0x0a, 32768)),
    }),
  ],

  'obj8_t': [
    type('min (0)', {}, {
      BE: byte(0x03, 0x03, 0x01, 0x03, 0x00),
      LE: byte(0x03, 0x03, 0x01, 0x03, 0x00),
    }),
    type('min (127)', objN(null, 127), {
      BE: byte(0x04, 0x03, 0x0e, 0x01, 0x03, 0x7f, ...byteStrN('\x0a', 127)),
      LE: byte(0x04, 0x0e, 0x03, 0x01, 0x03, 0x7f, ...byteStrN('\x0a', 127)),
    }),
  ],
  'obj16_t': [
    type('min (128)', objN(null, 128), {
      BE: Buffer.from([0x04, 0x03, 0x16, 0x01, 0x04, 0x00, 0x80, ...byteStrN('\x0a', 128)]),
      LE: Buffer.from([0x04, 0x16, 0x03, 0x01, 0x04, 0x80, 0x00, ...byteStrN('\x0a', 128)]),
    }),
    type('min (32767)', objN(null, 32767), {
      BE: Buffer.from([0x05, 0x00, 0x04, 0x54, 0x95, 0x01, 0x04, 0x7f, 0xff, ...byteStrN('\x0a', 32767)]),
      LE: Buffer.from([0x05, 0x95, 0x54, 0x04, 0x00, 0x01, 0x04, 0xff, 0x7f, ...byteStrN('\x0a', 32767)]),
    }),
  ],
  'obj32_t': [
    type('min (32768)', objN(null, 32768), {
      BE: Buffer.from([0x05, 0x00, 0x04, 0x54, 0xa0, 0x01, 0x05, 0x00, 0x00, 0x80, 0x00, ...byteStrN('\x0a', 32768)]),
      LE: Buffer.from([0x05, 0xa0, 0x54, 0x04, 0x00, 0x01, 0x05, 0x00, 0x80, 0x00, 0x00, ...byteStrN('\x0a', 32768)]),
    }),
  ],
};

module.exports = {
  toBuf,
  types,
};
